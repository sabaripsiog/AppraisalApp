//app.component.ts
import { Component, ViewChild, OnInit } from '@angular/core';

import { MatDialog, MatTable, MatTableDataSource } from '@angular/material';
import { DialogBoxComponent } from '../dialog-box/dialog-box.component';

export interface Goals {
  goal: string;
  id: number;
  priority : number;
}

const performanceGoalData: Goals[] = [
  {goal:"dasdasdas", id: 1, priority:3}
  
];

const competencyGoalData: Goals[] = [
  {goal:"QWERTY", id: 1, priority:4}
];

const leadershipGoalData: Goals[] = [
  {goal:",XCMCMXCX", id: 1, priority:3}
];


const GOALCATEGORIES = [
  {categoryID : 1, category: 'Performance'},
  {categoryID : 2, category: 'Competency'},
  {categoryID : 3, category: 'Leadership'},
]

@Component({
  selector: 'app-goallist',
  templateUrl: './goallist.component.html',
  styleUrls: ['./goallist.component.css']
})
export class GoallistComponent implements OnInit{
  ngOnInit(): void {
    this.dataSource = this.currentDataSource();
    
  }
  displayedColumns: string[] = ['id', 'name', 'priority','action'];
 
  dataSource : Goals[] = [];
  categories = GOALCATEGORIES;
  pageNumber: number = 1;

  @ViewChild(MatTable,{static:true}) table: MatTable<any>;

  constructor(public dialog: MatDialog) {}

  openDialog(action,obj) {
    obj.action = action;
    const dialogRef = this.dialog.open(DialogBoxComponent, {
      width: '300px',
      data:obj
    });

    dialogRef.afterClosed().subscribe(result => {
      if(result.event == 'Add'){
        this.addRowData(result.data);
      }else if(result.event == 'Update'){
        this.updateRowData(result.data);
      }else if(result.event == 'Delete'){
        this.deleteRowData(result.data);
      }
    });
  }

  addRowData(row_obj){
    
    this.dataSource.push({
      id:this.dataSource.length+1,
      goal:row_obj.goal,
      priority:row_obj.priority
    });
    this.table.renderRows();
    
  }
  updateRowData(row_obj){
    this.dataSource = this.dataSource.filter((value,key)=>{
      if(value.id == row_obj.id){
        value.goal = row_obj.goal;
        value.priority = row_obj.priority;
      }
      return true;
    });
  }
  deleteRowData(row_obj){
    this.dataSource = this.dataSource.filter((value,key)=>{
      return value.id != row_obj.id;
    });
  }

saveAndNext()
{
  this.pageNumber = this.pageNumber+1;
}

goPreviousPage()
{
  this.pageNumber = this.pageNumber-1;
}
currentDataSource()
{
  if(this.pageNumber == 1)
  {
  return performanceGoalData;
  }
  else if(this.pageNumber == 2)
  {
    return competencyGoalData;
  }
  else if(this.pageNumber == 3)
  {
    return leadershipGoalData;
  }
}
}






this.dataSource =  this.currentDataSource();
    this.dataSource.splice(this.dataSource.indexOf(row_obj),1);
    this.table.first.renderRows();
this.table.last.renderRows();






localStorage.setItem('EmployeeID', localStorage.getItem('loggedInEmployeeID'));
  localStorage.setItem('EmployeeName', localStorage.getItem('loggedInEmployeeName'));
  localStorage.setItem('EmployeeDesignation', localStorage.getItem('loggedInEmployeeDesignation'));
  localStorage.setItem('EmployeeDOB', localStorage.getItem('loggedInEmployeeDOB'));
  localStorage.setItem('EmployeeDOJ', localStorage.getItem('loggedInEmployeeDOJ'));
  localStorage.setItem('EmployeeAppraisalStatus', localStorage.getItem('loggedInEmployeeAppraisalStatus'));
  this.router.navigate(['/form']);